@inject ITicketDTOService TicketService

@if (Comment is not null)
{
    <li class="d-flex align-items-start">
        <div class=" align-items-start">
            <img class="comment-img ms-auto" src="@Comment.User?.ImageUrl" />
        </div>
        <div class="mx-3 flex-grow-1">
            <p class="fs-6 mb-0">@Comment.User?.FullName</p>
            <p>@Comment.Created.ToString("hh:mm tt")</p>
            <div class="d-flex flex-column">
                <div class="hstack col-12">
                    <div class="flex-grow-1">
                        <p class="col-9 mb-0">
                            @Comment.Content
                        </p>
                    </div>
                    <div class="hstack">
                        @if (userInfo?.UserId == Comment.User?.Id
                               || userInfo?.Roles.Contains(nameof(Roles.Admin)) == true
                               || userInfo?.UserId == ProjectManagerId)
                        {
                            <button @onclick="HandleDelete" class="btn mx-0 px-0">
                                <i class="ki-duotone ki-basket fs-2x">
                                    <span class="path1"></span>
                                    <span class="path2"></span>
                                    <span class="path3"></span>
                                    <span class="path4"></span>
                                </i>
                            </button>
                        }

                        @if (userInfo?.UserId == Comment.User?.Id || userInfo?.Roles.Contains(nameof(Roles.Admin)) == true)
                        {
                            <button type="button" class="btn" data-bs-toggle="modal" data-bs-target="#modal-comment-@Comment.Id">
                                <i class="ki-duotone ki-pencil fs-2x">
                                    <span class="path1"></span>
                                    <span class="path2"></span>
                                </i>
                            </button>
                        }
                    </div>
                </div>
            </div>
            <div>
            </div>
        </div>
    </li>

    <div class="modal fade" tabindex="-1" id="modal-comment-@Comment.Id">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="HandleUpdateCommentSubmit">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit Comment</h3>

                        <!--begin::Close-->
                        <div class="btn btn-icon btn-sm btn-active-light-primary ms-2" data-bs-dismiss="modal" aria-label="Close">
                            <i class="ki-duotone ki-cross fs-1"><span class="path1"></span><span class="path2"></span></i>
                        </div>
                        <!--end::Close-->
                    </div>

                    <div class="modal-body">
                            <InputTextArea @bind-Value="Comment.Content"
                                           id="Content"
                                           row="2"
                                           class="form-control"
                                           placeholder="Comment"
                                           aria-label="Comment" />
                        
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}
@code {
    #region Parameters
    [Parameter]
    public TicketCommentDTO? Comment { get; set; }

    [Parameter]
    public string? ProjectManagerId { get; set; }

    [Parameter]
    public int TicketId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TicketCommentDTO> HandleOnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnDelete { get; set; }
    #endregion



    #region State
    private UserInfo? userInfo;
    #endregion



    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        if (userInfo is null) return;
        if (Comment is null) return;

        if (Comment.UserId is null)
        {
            Comment.UserId = userInfo.UserId;
        }
        if (Comment.TicketId == 0)
        {
            Comment.TicketId = TicketId;
        }
    }


    private async Task HandleUpdateCommentSubmit()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is null) return;

            await HandleOnSubmit.InvokeAsync(Comment);
            Comment = await TicketService.GetCommentByIdAsync(TicketId, userInfo!.CompanyId);


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task HandleDelete()
    {
        try
        {
            if (Comment is null) return;

            await OnDelete.InvokeAsync(Comment.Id);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }
    #endregion
}
