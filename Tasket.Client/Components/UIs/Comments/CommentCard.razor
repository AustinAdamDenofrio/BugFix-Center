@inject ITicketDTOService TicketService

@if (Comment is not null)
{
    <li class="d-flex align-items-start">
        <div class=" align-items-start">
            <img class="comment-img ms-auto" src="@Comment.User?.ImageUrl" />
        </div>
        <div class="mx-3 flex-grow-1">
            <p class="fs-6 mb-0">@Comment.User?.FullName</p>
            <p>@Comment.Created.ToString("hh:mm tt")</p>
            <div class="d-flex flex-column">
                @* @if () { } not submitter *@

                <p class="col-9 mb-0">
                    @Comment.Content
                </p>
                <div>
                    @if (userInfo.UserId == Comment.User?.Id)
                    {
                        <form @onsubmit="HandleUpdateCommentSubmit" class="col-9">
                            <InputTextArea @bind-Value="Comment.Content"
                                           id="Content"
                                           row="2"
                                           class="form-control"
                                           placeholder="Comment"
                                           aria-label="Comment" />
                            <button class="btn btn-sm btn-primary" type="submit">
                                Save
                            </button>
                        </form>
                    }

                    @if (userInfo.UserId == Comment.User?.Id
                           || userInfo.Roles.Contains(nameof(Roles.Admin))
                           || userInfo.UserId == ProjectManagerId)
                    {
                        <a @onclick="HandleDelete" class="btn btn-sm btn-secondary">
                            Delete
                        </a>
                    }
                </div>



            </div>
            <div>
            </div>
        </div>
    </li>
}
@code {
    #region Parameters
    [Parameter]
    public TicketCommentDTO? Comment { get; set; }

    [Parameter]
    public string? ProjectManagerId { get; set; }

    [Parameter]
    public int TicketId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TicketCommentDTO> HandleOnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnDelete { get; set; }
    #endregion



    #region State
    private UserInfo? userInfo;
    #endregion



    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        if (Comment!.UserId is null)
        {
            Comment!.UserId = userInfo!.UserId;
        }
        if (Comment!.TicketId == 0)
        {
            Comment!.TicketId = TicketId;
        }
    }


    private async Task HandleUpdateCommentSubmit()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            await HandleOnSubmit.InvokeAsync(Comment);
            Comment = await TicketService.GetCommentByIdAsync(TicketId, userInfo!.CompanyId);


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task HandleDelete()
    {
        try
        {
            await OnDelete.InvokeAsync(Comment!.Id);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }
    #endregion
}
