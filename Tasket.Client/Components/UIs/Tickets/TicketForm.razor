@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService
@inject NavigationManager Nav

@if (Ticket is not null)
{
    <EditForm Model="Ticket" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="col-12 p-4 my-5 bg-warning-subtle">
            <div class="row g-2" action="#">
                <div class="col-12">
                    <label for="Title" class="form-label">
                        Title
                    </label>
                    <InputText @bind-Value="Ticket.Title"
                               id="Title"
                               class="form-control"
                               placeholder="Name"
                               aria-label="Name" />
                    <ValidationMessage For="() => Ticket.Title" />
                </div>
                <div class="col-12">
                    <label for="Description" class="form-label">
                        Description
                    </label>
                    <InputTextArea @bind-Value="Ticket.Description"
                                   id="Description"
                                   row="4"
                                   class="form-control"
                                   placeholder="Description"
                                   aria-label="Description" />
                    <ValidationMessage For="() => Ticket.Description" />
                </div>
                <div class="mb-2 col-3">
                    <label class="form-label">Priority</label>
                    <InputSelect class="form-control" @bind-Value="Ticket.Priority">
                        @foreach (TicketPriority priority in Enum.GetValues(typeof(TicketPriority)))
                        {
                            <option value="@priority">@priority.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Ticket.Priority" />
                </div>
                <div class="mb-2 col-5">
                    <label class="form-label">Type</label>
                    <InputSelect class="form-control" @bind-Value="Ticket.Type">
                        @foreach (TicketType type in Enum.GetValues(typeof(TicketType)))
                        {
                            <option value="@type">@type.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Ticket.Type" />
                </div>
                @if (Ticket.Project is null)
                {
                    <div class="mb-2 col-5">
                        <label class="form-label">Project</label>
                        <InputSelect class="form-control" @bind-Value="Ticket.ProjectId">
                            @foreach (ProjectDTO project in projects)
                            {
                                <option value="@project.Id">@project.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Ticket.ProjectId" />
                    </div>
                }
                @* <AuthorizeView Roles="Administrator, ProjectManager"> *@
                    <div class="mb-2 col-5">
                        <label class="form-label">Assigned Developer</label>
                        <InputSelect class="form-control" @bind-Value="Ticket.DeveloperUserId">
                            @*@foreach (UserDTO developer in company.user.IsInRole("Developer"))
                            {
                                <option value="@developer.Id">@developer.Name</option>
                            }*@
                        </InputSelect>
                        <ValidationMessage For="() => Ticket.DeveloperUserId" />
                    </div>
                @* </AuthorizeView> *@

                <div class="col-12 hstack justify-content-end gap-3">
                    @if (Ticket.Id != 0)
                    {
                        @if (Ticket.Archived == true || Ticket.ArchivedByProject == true)
                        {
                            <div class="text-start me-auto">
                                <a class="btn btn-lg btn-outline-primary" type="button" @onclick="RestoreProjectAsync">
                                    Restore
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="text-start me-auto">
                                <a class="btn btn-lg btn-outline-primary" type="button" @onclick="ArchiveProjectAsync">
                                    Archive
                                </a>
                            </div>
                        }
                    }

                    <div class="text-end">
                        <button class="btn btn-lg btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse" aria-expanded="false" aria-controls="collapse">
                            Cancel
                        </button>
                    </div>
                    <div class="text-end">
                        <button class="btn btn-lg btn-primary" type="submit">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <ValidationSummary />
    </EditForm>
}

@code {
    #region Parameters
    [Parameter]
    public TicketDTO? Ticket { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }


    [Parameter, EditorRequired]
    public EventCallback<TicketDTO> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnArchive { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnRestore { get; set; }
    #endregion



    #region State
    private UserInfo? userInfo;
    private IEnumerable<ProjectDTO> projects = [];
    #endregion



    #region Methods
    protected override async Task OnParametersSetAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        if (Ticket!.Project is null)
        {
            projects = await ProjectService.GetAllProjectsAsync(userInfo!.CompanyId);
        }

        if (Ticket!.SubmitterUserId is null)
        {
            Ticket!.SubmitterUserId = userInfo!.UserId;
        }
    }



    private async Task HandleSubmit()
    {
        try
        {
            if (Ticket!.SubmitterUserId is null)
            {
                Ticket!.SubmitterUserId = userInfo!.UserId;
            }
            await OnSubmit.InvokeAsync(Ticket);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task ArchiveProjectAsync()
    {
        if (Ticket is not null)
        {
            try
            {
                await OnArchive.InvokeAsync(Ticket.Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task RestoreProjectAsync()
    {
        if (Ticket is not null)
        {
            try
            {
                await OnRestore.InvokeAsync(Ticket.Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    #endregion
}
