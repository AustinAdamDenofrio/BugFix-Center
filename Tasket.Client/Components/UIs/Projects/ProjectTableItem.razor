@inject IProjectDTOService ProjectService


@if (Project is not null)
{
    <td><a type="button" href="projects/@Project.Id">@Project.Name</a></td>
    <td>@projectManager?.FullName</td>
    <td>
        <ul class="list-unstyled">

            @foreach (UserDTO member in Project.Members)
            {
                <li>
                    @member.FullName
                </li>
            }
        </ul>
    </td>
    <td>@Project.StartDate.ToString("d")</td>
    <td>@Project.EndDate.ToString("d")</td>
    <td>@Project.Priority</td>
}
@code {
    #region Parameters
    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }


    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion



    #region State
    UserInfo? userInfo;
    private UserDTO? projectManager;
    #endregion


    #region Methods
    protected override async Task OnParametersSetAsync()
    {

        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        if (Project is null || userInfo is null) return;

        projectManager = await ProjectService.GetProjectManagerAsync(Project.Id, userInfo.CompanyId);
    }

    private async Task ArchiveProjectAsync()
    {
        if (Project is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await ProjectService.ArchiveProjectAsync(Project.Id, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    #endregion
}
