@inject IProjectDTOService ProjectService
@if (Project is not null)
{
    <a class="card-body pb-3 text-decoration-none" href="/projects/@Project.Id">
        <div class="row">
            <div class="col-4">
                <svg class="d-block mt-1 mt-sm-0 mb-4" width="40" height="30" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                    <g class="text-info">
                        <path d="M34.9811 16.2655C34.3635 26.3194 26.3194 34.3634 16.2656 34.981V40H40V16.2655H34.9811Z" fill="currentColor"></path>
                    </g>
                    <g class="text-info">
                        <path d="M15.0195 30.0413C23.3152 30.0413 30.0403 23.3163 30.0403 15.0205H15.0195V30.0413Z" fill="currentColor"></path>
                    </g>
                    <g class="text-primary">
                        <path d="M29.1953 10.0415C27.141 4.19328 21.571 0 15.0208 0C6.725 0 0 6.725 0 15.0208C0 21.571 4.19328 27.141 10.0415 29.1953V10.0415H29.1953Z" fill="currentColor"></path>
                    </g>
                </svg>
            </div>
            <div class="col-8">
                <h6 class="d-flex flex-grow-1 justify-content-end"><span class="badge text-bg-secondary">@Project.Priority.ToString()</span></h6>
            </div>
        </div>
        <div class="d-flex flex-grow-1 justify-content-center">
            <h3 class="h4 my-3">@Project.Name</h3>
        </div>
        <div class="d-flex align-items-center">
            @if (Project.Archived == true)
            {
                <h6 class=""><span class="badge text-bg-secondary">Archived</span></h6>
            }
        </div>
    </a>    
}
@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }
    #endregion



    #region State
    UserInfo? userInfo;
    private UserDTO? projectManager;
    #endregion

    #region  Methods
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            projectManager = await ProjectService.GetProjectManagerAsync(Project.Id, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    #endregion 

}
