
@inject IProjectDTOService ProjectService


@if (Project is not null)
{
    <h4>
        @Project.Name
    </h4>
    <div class="hstack">
        @if (Project.Archived == false)
        {
            <button class="fs-sm fw-semibold px-0 py-2 btn btn-outline-danger me-3" type="button" @onclick="ArchiveProjectAsync">
                Archive
            </button>
        }
        else
        {
            <button class="btn btn-danger fs-sm fw-semibold px-0 py-2 me-3" type="button" @onclick="UnarchiveProjectAsync">
                Remove from Archive
            </button>
        }
        <a class="btn btn-warning fs-sm fw-semibold px-2 py-2"
           type="button"
           data-bs-toggle="collapse"
           href="#collapse@(Project.Id)"
           role="button"
           aria-expanded="false"
           aria-controls="collapse@(Project.Id)"
           aria-label="Edit">
            <i class="ai-pencil fs-xl ms-2 text-warning" aria-label="Edit"></i>
            Edit
        </a>
    </div>

    <div class="row">
        <div class="col">
            <div class="collapse" id="collapse@(Project.Id)">
                <ProjectForm Project="Project" @rendermode="InteractiveWebAssembly"/>
            </div>
        </div>
    </div>



 @*    <table class="table">
        <thead class="table-light">
            ...
        </thead>
        <tbody>
            ...
        </tbody>
    </table> *@

}

@code {
    #region Parameters
    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }


    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }
    #endregion



    #region State
    IEnumerable<ProjectDTO> projects = [];

    UserInfo? userInfo;

    // tinyMCE config
    private static readonly Dictionary<string, object> editorConfig = new()
    {
        { "toolbar", "undo redo | bold italic underline | link codesample " },
        { "plugins", "anchor autolink link charmap preview table codesample" },
        { "default_link_target", "_blank" },
        { "link_assume_external_targets", true },
        { "link_context_toolbar", true },
        { "codesample_languages", new object[] {
                new { text = "HTML/XML", value = "markup" },
                new { text = "JavaScript", value = "javascript" },
                new { text = "CSS", value = "css" },
                new { text = "C#", value = "csharp" },
                new { text = "Razor", value = "razor" },
                new { text = "JSON", value = "json" },
    }
        },
        { "codesample_global_prismjs", true },
        { "promotion", false },
        { "height", "350px" },
        //Try changing to a px or remove that section
    };
    #endregion



    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
    }


    private async Task ArchiveProjectAsync()
    {
        if (Project is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await ProjectService.ArchiveProjectAsync(Project.Id, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }            
        }
    }

    private async Task UnarchiveProjectAsync()
    {
        if (Project is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await ProjectService.RestoreProjectAsync(Project.Id, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    #endregion
}
