@inject IProjectDTOService ProjectService
@inject ICompanyDTOService CompanyService


@if (CompanyMembers is not null)
{
    <div class="card rounded-5 border-1 py-1 p-md-2 p-xl-3 p-xxl-4 mb-4">
        <div class=" bg-white p-5">
            <h3>Project Team:</h3>
            @if (ProjectManager is not null)
            {
                <div class="hstack py-5">
                    <img src="@ProjectManager.ImageUrl" class="member-img" />
                    <div class="px-3">
                        <span class=""><h4>@ProjectManager.FullName</h4></span>
                        @foreach (Roles roles in Enum.GetValues(typeof(Roles)))
                        {
                            if (ProjectManager.Role == roles.ToString())
                            {
                                <p class="badge badge-light-success fw-bold fs-8 px-2 py-1 ms-2">@roles.GetDisplayName()</p>
                            }
                        }
                    </div>
                    @if (userInfo?.Roles.Any(r => r == nameof(Roles.Admin)) == true)
                    {
                        <button class="btn ms-auto text-hover-danger" @onclick="HandleRemoveProjectManager" type="button">
                            <i class="ki-duotone ki-trash text-dark fs-2">
                                <span class="path1"></span>
                                <span class="path2"></span>
                                <span class="path3"></span>
                                <span class="path4"></span>
                                <span class="path5"></span>
                            </i>
                        </button>                    
                    }
                </div>
            }

            @if (userInfo?.Roles.Any(r => r == nameof(Roles.Admin)) == true)
            {
                <form @onsubmit="HandleUpdateProjectManager" class="mt-5">
                <label class="form-label">Add Project Manager</label>
                <InputSelect class="form-control col-6" @bind-Value="selectedProjectManagerId">
                    <option value="">Select a project manager..</option>
                    @foreach (UserDTO employee in CompanyMembers.Where(cm => cm.Role == nameof(Roles.ProjectManager)))
                    {
                        <option value="@employee.Id">@employee.FullName</option>

                    }
                </InputSelect>
                <div class="flex-grow-1 text-end">
                        <button class="btn btn-light-success text-hover-danger mt-2 mb-3" type="submit">
                        Update
                    </button>
                </div>
            </form>            
            }


        </div>
        <div class="bg-white p-5">
            @if (CompanyMembers.Any(cm => cm.Role == nameof(Roles.Developer)) == true)
            {
                @if (ProjectMembers?.Any(pm => pm.Role == nameof(Roles.Developer)) == true)
                {
                    <h4>Development Team:</h4>
                    @foreach (UserDTO developer in ProjectMembers.Where(pm => pm.Role == nameof(Roles.Developer)))
                    {
                        <ProjectTeamMemberCard Member="developer"
                                               OnRemove="HandleRemoveMember" />
                    }
                }

                <form @onsubmit="HandleAddDeveloper">
                    <label class="form-label">Add Developers:</label>
                    <InputSelect class="form-control" @bind-Value="selectedDeveloperId">
                        <option value="">Select a project developer..</option>
                        @foreach (UserDTO employeeDeveloper in CompanyMembers.Where(cm => cm.Role == nameof(Roles.Developer)))
                        {
                            <option value="@employeeDeveloper.Id">@employeeDeveloper.FullName</option>

                        }
                    </InputSelect>
                    <div class="flex-grow-1 text-end">
                        <button class="btn btn-light-success text-hover-danger mt-2 mb-3" type="submit">
                            Update
                        </button>
                    </div>
                </form>
            }
            else
            {
                <h3>Project Developers: None exist in company</h3>
            }
        </div>
        <div>
            @if (CompanyMembers.Any(cm => cm.Role == nameof(Roles.Submitter)) == true)
            {
                @if (ProjectMembers?.Any(pm => pm.Role == nameof(Roles.Submitter)) == true)
                {
                    <h4>Submitting Team:</h4>
                    @foreach (UserDTO submitter in ProjectMembers.Where(pm => pm.Role == nameof(Roles.Submitter)))
                    {
                        <ProjectTeamMemberCard Member="submitter"
                                               OnRemove="HandleRemoveMember" />
                    }
                }

                <form @onsubmit="HandleAddSubmitter">
                    <label class="form-label">Add Submitter:</label>
                    <InputSelect class="form-control" @bind-Value="selectedSubmitterId">
                        <option value="">Select a project submitter..</option>
                        @foreach (UserDTO submitter in CompanyMembers.Where(cm => cm.Role == nameof(Roles.Submitter)))
                        {
                            <option value="@submitter.Id">@submitter.FullName</option>
                        }
                    </InputSelect>
                    <div class="flex-grow-1 text-end">
                        <button class="btn btn-light-success text-hover-danger mt-2 mb-3" type="submit">
                            Update
                        </button>
                    </div>
                </form>
            }
        </div>
    </div>
}

@code {
    #region Parameters
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public IEnumerable<UserDTO>? CompanyMembers { get; set; }

    [Parameter]
    public IEnumerable<UserDTO>? ProjectMembers { get; set; }

    [Parameter]
    public UserDTO? ProjectManager { get; set; }



    [Parameter]
    public EventCallback<string?> OnUpdate { get; set; }

    [Parameter]
    public EventCallback<string?> OnRemove { get; set; }

    [Parameter]
    public EventCallback<string?> OnMemberRemove { get; set; }

    [Parameter]
    public EventCallback<string?> OnAddMember { get; set; }
    #endregion



    #region State
    private UserInfo? userInfo;

    private ProjectDTO? project;


    // Selected values from forms
    private string? selectedProjectManagerId;
    private string? selectedDeveloperId;
    private string? selectedSubmitterId;
    #endregion



    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        if (userInfo is null) return;
    }

    protected override async Task OnParametersSetAsync()
    {

        if (ProjectId is 0) return;
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        if (userInfo is null) return;
        try
        {
            project = await ProjectService.GetProjectByIdAsync(ProjectId, userInfo.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleUpdateProjectManager()
    {
        if (selectedProjectManagerId is not null)
        {
            if (userInfo is null) return;

            try
            {
                await OnUpdate.InvokeAsync(selectedProjectManagerId);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleRemoveProjectManager()
    {

        if (userInfo is null) return;

        try
        {
            await OnRemove.InvokeAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleRemoveMember(string memberId)
    {
        if (userInfo is null) return;


        try
        {
            await OnMemberRemove.InvokeAsync(memberId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleAddDeveloper()
    {
        if (userInfo is null) return;

        try
        {
            await OnAddMember.InvokeAsync(selectedDeveloperId);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task HandleAddSubmitter()
    {
        if (userInfo is null) return;

        try
        {
            await OnAddMember.InvokeAsync(selectedSubmitterId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }
    #endregion
}
