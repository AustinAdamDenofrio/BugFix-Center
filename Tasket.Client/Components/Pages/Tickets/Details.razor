@page "/tickets/index/{ticketId:int}"

@rendermode InteractiveServer

@inject ITicketDTOService TicketService


@* @ticket.Title *@
@* @ticket.Description *@
@* @ticket.Created *@
@* @ticket.Updated *@
@* @ticket.Archived *@
@* @ticket.ArchivedByProject *@
@* @ticket.Priority *@
@* @ticket.Type *@
@* @ticket.Status *@
@* @ticket.Project.Name Include link to project details*@
@* @ticket.SubmitterUser.FullName *@
@* @ticket.DeveloperUser.FullName *@


@if (ticket is not null)
{
    <div class="hstack">
        <div class="col-6">

            <div class="card" style="width: 18rem;">
                <div class="card-header">
                    @ticket.Title
                </div>
                <div class="card-body">
                    <p class="card-text">@ticket.Description</p>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        @ticket.Project?.Name
                        <p>Ticket Maker: @ticket.SubmitterUser!.FullName</p>
                        <p>Assigned to: @ticket.DeveloperUser?.FullName</p>
                    </li>
                    <li class="list-group-item">
                        <p>
                            Created Date: @ticket.Created.ToString("d")
                        </p>
                    </li>
                    @if (ticket.Updated is not null)
                    {
                        <li class="list-group-item">
                            <p>
                                Updated Date: @ticket.Updated.Value.ToString("d")
                            </p>
                        </li>
                    }

                    @if (ticket.Archived == true || ticket.ArchivedByProject == true)
                    {
                        <li class="list-group-item">
                            <h5><span class="badge text-bg-secondary">Archived</span></h5>
                        </li>
                    }


                    <li class="list-group-item">
                        <h5><span class="badge text-bg-secondary">@ticket.Priority</span></h5>
                        <h5><span class="badge text-bg-secondary">@ticket.Type</span></h5>
                        <h5><span class="badge text-bg-secondary">@ticket.Status</span></h5>
                    </li>
                    <li class="list-group-item">
                        <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse" aria-expanded="false" aria-controls="collapse">
                            Edit
                        </button>
                    </li>
                    <li class="list-group-item">

                    </li>
                </ul>
            </div>

        </div>
        <div class="col-6 collapse" id="collapse">
            <TicketForm Ticket="ticket" 
                        OnSubmit="HandleSubmit"
                        OnRestore="HandleRestore"
                        OnArchive="HandleArchive"/>
        </div>
    </div>
}

@code {

    #region Parameters
    [Parameter]
    public int TicketId { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region States
    private UserInfo? userInfo;


    private TicketDTO? ticket;
    #endregion




    #region Methods
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    private async Task HandleSubmit(TicketDTO ticketForm)
    {
        if (ticketForm is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.UpdateTicketAsync(ticketForm, userInfo!.CompanyId, userInfo!.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleArchive(int formTicketId)
    {
        if (formTicketId != 0)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.ArchiveTicketAsync(formTicketId, userInfo!.CompanyId);


                ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleRestore(int formTicketId)
    {
        if (formTicketId != 0)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.RestoreTicketAsync(formTicketId, userInfo!.CompanyId);


                ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    #endregion
}

