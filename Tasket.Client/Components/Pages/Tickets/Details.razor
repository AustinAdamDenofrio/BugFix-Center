@page "/tickets/{ticketId:int}"
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService

@attribute [Authorize]


@if (ticket is not null)
{
    <div class="row">
        <div class="col-lg-9 pt-4 pb-2 pb-sm-4 mt-5">
            <h1 class="h2 mb-4">Overview</h1>

            <section class="card border-0 py-1 p-md-2 p-xl-3 p-xxl-4 mb-4">
                <div class=" card-header flex-grow-1">
                    <h1 class="mb-0">
                        @ticket.Title
                    </h1>
                    @if (userInfo.UserId == ticket.SubmitterUserId
                   || userInfo.UserId == ticket.DeveloperUserId
                   || userInfo.UserId == projectManager?.Id
                   || userInfo.Roles.Contains(nameof(Roles.Admin)))
                    {
                        <div class="ms-auto">
                            <button type="button" class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#kt_modal_1">
                                Edit
                            </button>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-8 d-flex mb-0 " role="alert">
                            <div class="d-flex flex-grow-1 flex-column">
                                <h3 class="ps-2 mb-3">Description</h3>
                                <p class="ps-2 text-dark">
                                    @ticket.Description
                                </p>
                                <div class="my-3 mt-auto">
                                    <UploadForm TicketId="TicketId" OnChange="HandleUpdatePage" />
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4 d-md-flex">
                            <div class="ms-auto">
                                <p class="fs-6">Project: </p>
                                <h3 class="h5 mb-2">
                                    @ticket.Project?.Name
                                </h3>
                                <p class="fs-6 mt-3">Attachments: </p>
                                <div class="row mb-5 g-5">
                                    @foreach (TicketAttachmentDTO attachment in ticket.Attachments)
                                    {
                                        <div class="col-6">
                                            <AttachmentCard Attachment="attachment" OnDelete="HandleDeleteAttachment" />
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </section>

            <!-- Comment Section -->
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">
                        Comments
                    </h4>
                    <ul>
                        <li class="d-flex flex-row-reverse align-items-start "></li>
                    </ul>
                </div>
            </div>

            <section class="card border-0 py-1 p-md-2 p-xl-3 p-xxl-4">
                <div class="card-body">
                    <div class="d-flex align-items-center mt-sm-n1 pb-4 mb-0 mb-lg-1 mb-xl-3">
                        <i class="ai-cart text-primary lead pe-1 me-2"></i>
                        <h2 class="h4 mb-0">
                            Comments
                        </h2>
                    </div>
                    @if (userInfo.UserId == ticket.SubmitterUserId
                   || userInfo.UserId == ticket.DeveloperUserId
                   || userInfo.UserId == projectManager?.Id
                   || userInfo.Roles.Contains(nameof(Roles.Admin)))
                    {
                        <h2>New comment</h2>
                        <form @onsubmit="HandleAddComment" class="col-12">
                            <InputTextArea @bind-Value="newComment.Content"
                                           id="Content"
                                           row="2"
                                           class="form-control"
                                           placeholder="Comment"
                                           aria-label="Comment" />
                            <button class="btn btn-sm btn-primary" type="submit">
                                Save
                            </button>
                        </form>
                    }
                    @foreach (TicketCommentDTO comment in ticket.Comments)
                    {
                        <hr class="border-secondary" />
                        <div class="table-responsive pt-1" @key="comment.Id">
                            <CommentCard Comment="comment"
                                         HandleOnSubmit="HandleUpdateComment"
                                         OnDelete="HandleDeleteComment"
                                         ProjectManagerId="projectManager.Id" />
                        </div>
                    }
                </div>
            </section>
        </div>



        <div class="col-lg-3 mt-5 bg-light card border-0 py-1 p-md-2 p-xl-3 p-xxl-4">
            <div class="card">
                <div class="card-header mt-5">
                    <div class="hstack flex-grow-1">
                        <h4 class="d-flex flex-grow-1 justify-content-start me-auto">Ticket Details</h4>
                        <div>
                            <p class="small mb-0">Priority:</p>
                            <h4 class="d-flex align-items-center"><span class="badge rounded-pill text-bg-info ">@ticket.Priority</span></h4>
                        </div>
                    </div>
                    <div>
                        <h5>Created</h5>
                        <p>@ticket.Created.ToString("d")<span>, @ticket.Created.ToString("hh:mmt")</span></p>
                    </div>
                </div>
                <div class="card-body">

                    <div class="text-body-secondary fw-medium d-flex flex-wrap flex-sm-nowrap align-iteems-center">
                        <div class="vstack align-items-start me-3">
                            <p><strong>Ticket Maker:</strong> @ticket.SubmitterUser?.FullName</p>
                            <p><strong>Assigned to:</strong> @ticket.DeveloperUser?.FullName</p>
                        </div>
                    </div>
                    <table class="table mb-0">
                        <tbody>
                            <tr>
                                <td class="border-0 text-body-secondary py-1 px-0">Type</td>
                                <td class="border-0 text-dark fw-medium py-1 ps-3">@ticket.Type</td>
                            </tr>
                            <tr>
                                <td class="border-0 text-body-secondary py-1 px-0">Status</td>
                                <td class="border-0 text-dark fw-medium py-1 ps-3">@ticket.Status</td>
                            </tr>
                            @if (ticket.Archived == true)
                            {
                                <tr>
                                    <td class="border-0 text-body-secondary py-1 px-0">Archive Status:</td>
                                    <td class="border-0 text-dark fw-medium py-1 ps-3 ms-auto">
                                        Archived
                                        @if (ticket.ArchivedByProject == true)
                                        {
                                            <span class="badge text-bg-secondary">Project Archived</span>
                                        }
                                    </td>
                                </tr>
                            }
                            <tr>
                                <td class="border-0 text-body-secondary py-1 px-0">Created:</td>
                                <td class="border-0 text-dark fw-medium py-1 ps-3">@ticket.Created.ToString("d")</td>
                            </tr>

                            @if (ticket.Updated is not null)
                            {
                                <tr>
                                    <td class="border-0 text-body-secondary py-1 px-0">Updated Date:</td>
                                    <td class="border-0 text-dark fw-medium py-1 ps-3">@ticket.Updated.Value.ToString("d")</td>
                                </tr>
                            }

                        </tbody>
                    </table>

                    <p>
                        Developer: @ticket.DeveloperUser?.FullName
                    </p>
                    <AuthorizeView Roles="Admin, ProjectManager">

                        @if (projectDevelopers is not null && context.User.IsInRole(nameof(Roles.Admin))
                       || projectDevelopers is not null && userInfo.UserId == projectManager?.Id)
                        {
                            <form @onsubmit="UpdateTicket" class="col-9">
                                <div class="col-12">
                                    <label class="form-label">Assigned Developer</label>
                                    <InputSelect class="form-control" @bind-Value="ticket.DeveloperUserId">
                                        @foreach (UserDTO developer in projectDevelopers)
                                        {
                                            <option value="@developer.Id">@developer.FullName</option>
                                        }
                                    </InputSelect>
                                </div>
                                <button class="btn btn-sm btn-primary my-3" type="submit">
                                    Save
                                </button>
                            </form>
                        }
                    </AuthorizeView>
                </div>
            </div>
            <div class="card border-0 py-1 p-md-2 p-xl-3 p-xxl-4 bg-secondary mt-4">
                <div class="card-header d-flex justify-content-start">
                    <h4 class="pt-3">
                        Projects
                    </h4>
                </div>
                <hr/>
                <div class="card-body">
                    @foreach (ProjectDTO project in projects)
                    {
                        <div class="mb-4">
                            <a href="/projects/@project.Id" class="text-decoration-none text-dark">@project.Name</a>
                            @foreach (TicketDTO ticket in project.Tickets)
                            {
                                <div class="mb-1">
                                    <a href="/tickets/index/@ticket.Id" class="small text-primary  ps-3 text-decoration-none">@ticket.Type</a>
                                </div>
                            }
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>






    @if (userInfo.UserId == ticket.SubmitterUserId
                || userInfo.UserId == ticket.DeveloperUserId
                || userInfo.UserId == projectManager?.Id
               || userInfo.Roles.Contains(nameof(Roles.Admin)))
    {
        <div class="modal fade" tabindex="-1" id="kt_modal_1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <EditForm Context="formContext" Model="ticket" OnValidSubmit="UpdateTicket">
                        <DataAnnotationsValidator />
                        <div class="modal-header">
                            <h3 class="modal-title">Edit Ticket</h3>

                            <!--begin::Close-->
                            <div class="btn btn-icon btn-sm btn-active-light-primary ms-2" data-bs-dismiss="modal" aria-label="Close">
                                <i class="ki-duotone ki-cross fs-1"><span class="path1"></span><span class="path2"></span></i>
                            </div>
                            <!--end::Close-->
                        </div>

                        <div class="modal-body">
                            <div class="col-12">
                                <label for="Title" class="form-label">
                                    Title
                                </label>
                                <InputText @bind-Value="ticket.Title"
                                           id="Title"
                                           class="form-control"
                                           placeholder="Name"
                                           aria-label="Name" />
                                <ValidationMessage For="() => ticket.Title" />
                            </div>
                            <div class="col-12">
                                <label for="Description" class="form-label">
                                    Description
                                </label>
                                <InputTextArea @bind-Value="ticket.Description"
                                               id="Description"
                                               row="4"
                                               class="form-control"
                                               placeholder="Description"
                                               aria-label="Description" />
                                <ValidationMessage For="() => ticket.Description" />
                            </div>
                            <div class="mb-2 col-3">
                                <label class="form-label">Priority</label>
                                <InputSelect class="form-control" @bind-Value="ticket.Priority">
                                    @foreach (TicketPriority priority in Enum.GetValues(typeof(TicketPriority)))
                                    {
                                        <option value="@priority">@priority.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => ticket.Priority" />
                            </div>
                            <div class="mb-2 col-5">
                                <label class="form-label">Type</label>
                                <InputSelect class="form-control" @bind-Value="ticket.Type">
                                    @foreach (TicketType type in Enum.GetValues(typeof(TicketType)))
                                    {
                                        <option value="@type">@type.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => ticket.Type" />
                            </div>
                            @if (ticket.Project is null)
                            {
                                <div class="mb-2 col-5">
                                    <label class="form-label">Project</label>
                                    <InputSelect class="form-control" @bind-Value="ticket.ProjectId">
                                        @foreach (ProjectDTO project in projects)
                                        {
                                            <option value="@project.Id">@project.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => ticket.ProjectId" />
                                </div>
                            }


                            <div class="col-12 hstack justify-content-end gap-3">
                                @if (ticket.Id != 0)
                                {
                                    @if (ticket.Archived == true || ticket.ArchivedByProject == true)
                                    {
                                        <div class="text-start me-auto">
                                            <a class="btn btn-primary" @onclick="RestoreTicket">Restore</a>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-start me-auto">
                                            <a class="btn btn-icon btn-primary text-center" @onclick="ArchiveTicket"><i class="fas fa-envelope-open-text fs-4 me-2"></i></a>
                                        </div>
                                    }
                                }
                            </div>


                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
                        </div>
                        <ValidationSummary />
                    </EditForm>
                </div>
            </div>
        </div>

    }
}

@code {

    #region Parameters
    [Parameter]
    public int TicketId { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region States
    private UserInfo? userInfo;


    private TicketDTO? ticket;
    private IEnumerable<TicketDTO> tickets = [];
    private IEnumerable<ProjectDTO> projects = [];
    private TicketCommentDTO newComment = new TicketCommentDTO();

    private UserDTO? projectManager;
    private IEnumerable<UserDTO> projectMembers = [];
    private IEnumerable<UserDTO> projectDevelopers = [];
    #endregion




    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        tickets = await TicketService.GetAllTicketsAsync(userInfo!.CompanyId);

        newComment.UserId = userInfo.UserId;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is null) return;

            ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo.CompanyId);
            projects = await ProjectService.GetAllProjectsAsync(userInfo.CompanyId);

            if (ticket is null) return;

            projectMembers = await ProjectService.GetProjectMembersAsync(ticket.ProjectId, userInfo.CompanyId);

            projectDevelopers = projectMembers.Where(pm => pm.Role == "Developer");
            projectManager = projectMembers.FirstOrDefault(pm => pm.Role == nameof(Roles.ProjectManager));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task ArchiveTicket()
    {
        if (ticket is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.ArchiveTicketAsync(ticket.Id, userInfo!.CompanyId);


                ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task RestoreTicket()
    {
        if (ticket is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.RestoreTicketAsync(ticket.Id, userInfo!.CompanyId);


                ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task UpdateTicket()
    {
        if (ticket is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.UpdateTicketAsync(ticket, userInfo!.CompanyId, userInfo!.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleUpdatePage()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleAddComment()
    {
        if (newComment is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                newComment.UserId = userInfo!.UserId;
                newComment.TicketId = TicketId;

                await TicketService.AddCommentAsync(newComment, userInfo!.CompanyId);

                newComment = new TicketCommentDTO();

                ticket!.Comments = [.. await TicketService.GetTicketCommentsAsync(ticket.Id, userInfo!.CompanyId)];
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleUpdateComment(TicketCommentDTO commentForm)
    {
        if (commentForm is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.UpdateCommentAsync(commentForm, userInfo!.CompanyId, userInfo!.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleDeleteComment(int commentId)
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            await TicketService.DeleteCommentAsync(commentId, userInfo!.CompanyId);

            ticket!.Comments = [.. await TicketService.GetTicketCommentsAsync(ticket.Id, userInfo!.CompanyId)];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task HandleDeleteAttachment(int attachmentId)
    {

        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        await TicketService.DeleteTicketAttachment(attachmentId, userInfo!.CompanyId);

        ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
    }
    #endregion
}

