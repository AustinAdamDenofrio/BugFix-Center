@page "/tickets/{ticketId:int}"

@rendermode InteractiveAuto

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService


@if (ticket is not null)
{
    <div class="row">
        <div class="col-lg-9 pt-4 pb-2 pb-sm-4 mt-5">
            <h1 class="h2 mb-4">Overview</h1>

            <!-- Ticket info -->
            <div class="collapse " id="collapse">
                <TicketForm Ticket="ticket"
                            OnSubmit="HandleSubmit"
                            OnRestore="HandleRestore"
                            OnArchive="HandleArchive" />
            </div>
            <section class="card border-0 py-1 p-md-2 p-xl-3 p-xxl-4 mb-4">
                <div class="card-body">
                    <div class="d-flex align-items-center mt-sm-n1 pb-4 mb-0 mb-lg-1 mb-xl-3">
                        <i class="ai-user text-primary lead pe-1 me-2"></i>
                        <h2 class="h4 mb-0">
                            @ticket.Title
                        </h2>
                        <button class="btn btn-sm btn-secondary ms-auto" type="button" data-bs-toggle="collapse" data-bs-target="#collapse" aria-expanded="false" aria-controls="collapse">
                            Edit info
                        </button>
                    </div>
                    <div class="d-md-flex align-items-center">
                        <div class="d-sm-flex align-items-center">

                            <div class="pt-3 pt-sm-0 ps-sm-3">
                                <h3 class="h5 mb-2">
                                    @ticket.Project?.Name
                                </h3>
                                <div class="text-body-secondary fw-medium d-flex flex-wrap flex-sm-nowrap align-iteems-center">
                                    <div class="vstack align-items-start me-3">
                                        <p>Ticket Maker: @ticket.SubmitterUser!.FullName</p>
                                        <p>Assigned to: @ticket.DeveloperUser?.FullName</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row py-4 mb-2 mb-sm-3">
                        <div class="col-md-6 mb-4 mb-md-0">
                            <table class="table mb-0">
                                <tbody>
                                    <tr>
                                        <td class="border-0 text-body-secondary py-1 px-0">Priority</td>
                                        <td class="border-0 text-dark fw-medium py-1 ps-3 badge text-bg-secondary">@ticket.Priority</td>
                                    </tr>
                                    <tr>
                                        <td class="border-0 text-body-secondary py-1 px-0">Type</td>
                                        <td class="border-0 text-dark fw-medium py-1 ps-3 badge text-bg-secondary">@ticket.Type</td>
                                    </tr>
                                    <tr>
                                        <td class="border-0 text-body-secondary py-1 px-0">Status</td>
                                        <td class="border-0 text-dark fw-medium py-1 ps-3 badge text-bg-secondary">@ticket.Status</td>
                                    </tr>
                                    @if (ticket.Archived == true)
                                    {
                                        <tr>
                                            <td class="border-0 text-body-secondary py-1 px-0">Archive Status:</td>
                                            <td class="border-0 text-dark fw-medium py-1 ps-3 badge text-bg-secondary ms-auto">
                                                Archived
                                                @if (ticket.ArchivedByProject == true)
                                                {
                                                    <span class="badge text-bg-secondary">Project Archived</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    <tr>
                                        <td class="border-0 text-body-secondary py-1 px-0">Created:</td>
                                        <td class="border-0 text-dark fw-medium py-1 ps-3">@ticket.Created.ToString("d")</td>
                                    </tr>

                                    @if (ticket.Updated is not null)
                                    {
                                        <tr>
                                            <td class="border-0 text-body-secondary py-1 px-0">Updated Date:</td>
                                            <td class="border-0 text-dark fw-medium py-1 ps-3 badge text-bg-secondary">@ticket.Updated.Value.ToString("d")</td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>


                    <div class="alert alert-info d-flex mb-0 vstack" role="alert">
                        <h3>Description</h3>
                        <p class="ps-2 text-dark">
                            @ticket.Description
                        </p>
                    </div>

                    <div class="my-5">
                        <UploadForm TicketId="TicketId" OnChange="HandleUpdatePage" />
                    </div>

                </div>
            </section>

            <!-- Comment Section -->
            <section class="card border-0 py-1 p-md-2 p-xl-3 p-xxl-4">
                <div class="card-body">
                    <div class="d-flex align-items-center mt-sm-n1 pb-4 mb-0 mb-lg-1 mb-xl-3">
                        <i class="ai-cart text-primary lead pe-1 me-2"></i>
                        <h2 class="h4 mb-0">
                            Comments
                        </h2>
                    </div>
                    <h2>New comment</h2>
                    <CommentForm OnSubmit="HandleAddComment"
                                 Comment="newComment"
                                 TicketId="TicketId" />
                    <!-- Comment Section Header -->
                    @foreach (TicketCommentDTO comment in ticket.Comments)
                    {
                        <hr />
                        <div class="table-responsive pt-1" @key="comment.Id">
                            <CommentCard Comment="comment"
                                         HandleOnSubmit="HandleUpdateComment"
                                         OnDelete="HandleDeleteComment" />
                        </div>
                    }
                </div>
            </section>
        </div>
        <div class="col-lg-3 mt-5 bg-light card border-0 py-1 p-md-2 p-xl-3 p-xxl-4">

            <div class="card mb-3 border-0 py-1 p-md-2 p-xl-3 p-xxl-4 bg-secondary text-center">
                <h4 class="mb-0 pb-0">Attachments</h4>
            </div>
            <div class="row mb-5 g-3">
                @foreach (TicketAttachmentDTO attachment in ticket.Attachments)
                {
                    <div class="col-6 px-2">
                        <AttachmentCard Attachment="attachment" OnDelete="HandleDeleteAttachment" />
                    </div>
                }
            </div>

            <div class="card mb-3 border-0 py-1 p-md-2 p-xl-3 p-xxl-4 bg-secondary text-center">
                <h4 class="mb-0 pb-0">Projects</h4>
            </div>
            @foreach (ProjectDTO project in projects)
            {
                <div class="mb-4">
                    <a href="/projects/@project.Id" class="text-primary text-decoration-none ">@project.Name</a>
                    @foreach (TicketDTO ticket in project.Tickets)
                    {
                        <div class="mb-1">
                            <a href="/tickets/index/@ticket.Id" class="small text-dark ps-3 text-decoration-none">@ticket.Type</a>
                        </div>
                    }
                </div>
            }
        </div>

    </div>
}

@code {

    #region Parameters
    [Parameter]
    public int TicketId { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region States
    UserInfo? userInfo;


    IEnumerable<TicketDTO> tickets = [];
    IEnumerable<ProjectDTO> projects = [];
    private TicketDTO? ticket;

    private TicketCommentDTO newComment = new TicketCommentDTO();
    #endregion




    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        tickets = await TicketService.GetAllTicketsAsync(userInfo!.CompanyId);

    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
            projects = await ProjectService.GetAllProjectsAsync(userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleArchive(int formTicketId)
    {
        if (formTicketId != 0)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.ArchiveTicketAsync(formTicketId, userInfo!.CompanyId);


                ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleRestore(int formTicketId)
    {
        if (formTicketId != 0)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.RestoreTicketAsync(formTicketId, userInfo!.CompanyId);


                ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleSubmit(TicketDTO ticketForm)
    {
        if (ticketForm is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.UpdateTicketAsync(ticketForm, userInfo!.CompanyId, userInfo!.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleUpdatePage()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleAddComment(TicketCommentDTO commentForm)
    {
        if (commentForm is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.AddCommentAsync(commentForm, userInfo!.CompanyId);

                ticket!.Comments = [.. await TicketService.GetTicketCommentsAsync(ticket.Id, userInfo!.CompanyId)];
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleUpdateComment(TicketCommentDTO commentForm)
    {
        if (commentForm is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.UpdateCommentAsync(commentForm, userInfo!.CompanyId, userInfo!.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleDeleteComment(int commentId)
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            await TicketService.DeleteCommentAsync(commentId, userInfo!.CompanyId);

            ticket!.Comments = [.. await TicketService.GetTicketCommentsAsync(ticket.Id, userInfo!.CompanyId)];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task HandleDeleteAttachment(int attachmentId)
    {

        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        await TicketService.DeleteTicketAttachment(attachmentId, userInfo!.CompanyId);

        ticket = await TicketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);
    }
    #endregion
}

