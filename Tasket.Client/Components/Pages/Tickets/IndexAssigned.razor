@using Microsoft.AspNetCore.Authorization

@page "/tickets/assignments"
@rendermode InteractiveAuto

@* @attribute [Authorize(Roles = $"{nameof(Roles.ProjectManager)}, {nameof(Roles.Developer)}, {nameof(Roles.Submitter)}")] *@

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService

@if (tickets is not null)
{
    @if (tickets.Any(t => t.Priority == TicketPriority.Urgent) == true)
    {
        <h3 class="lead">Urgent Tickets:</h3>
        <div class="row row-cols-1 row-cols-sm-4 g-3 justify-content-center">
            @foreach (TicketDTO ticket in tickets)
            {
                if (ticket.Priority == TicketPriority.Urgent)
                {

                    <div class="col">
                        <div class="card border-0 rounded-5 mb-4">
                            <TicketCard Ticket="ticket" />
                        </div>
                    </div>
                }
            }
        </div>
    }


    <h3 class="lead">All Tickets:</h3>
    <div class="table-responsive">
        <table class="table gs-7 gy-7 gx-7">
            <thead>
                <tr class="fw-semibold fs-6 text-gray-800 border-bottom border-gray-200">
                    <th>Ticket</th>
                    <th>Created</th>
                    <th>Project</th>
                    <th>Status</th>
                    <th>Priority</th>
                </tr>
            </thead>
            <tbody>
                    @foreach (TicketDTO ticket in tickets)
                    {
                    <tr @key="ticket.Id">
                        <TicketTableItem Ticket="ticket" />
                    </tr>
                    }
            </tbody>
        </table>
    </div>


}

@code {
    #region Parameters
    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    #endregion



    #region States
    IEnumerable<ProjectDTO> projects = [];
    IEnumerable<TicketDTO> tickets = [];

    UserInfo? userInfo;
    #endregion


    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        if (userInfo is null) return;
        // projects = await ProjectService.GetAllAssignedProjectsAsync(userInfo!.CompanyId, userInfo.UserId);

        tickets = await TicketService.GetUserTicketsAsync(userInfo.CompanyId, userInfo.UserId);
    }

    private async Task HandleSubmit(TicketDTO ticketForm)
    {
        if (ticketForm is not null)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.AddTicketAsync(ticketForm, userInfo!.CompanyId);

                projects = await ProjectService.GetAllAssignedProjectsAsync(userInfo!.CompanyId, userInfo.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleArchive(int formTicketId)
    {
        if (formTicketId != 0)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.ArchiveTicketAsync(formTicketId, userInfo!.CompanyId);

                projects = await ProjectService.GetAllAssignedProjectsAsync(userInfo!.CompanyId, userInfo.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    private async Task HandleRestore(int formTicketId)
    {
        if (formTicketId != 0)
        {
            try
            {
                userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

                await TicketService.RestoreTicketAsync(formTicketId, userInfo!.CompanyId);

                projects = await ProjectService.GetAllAssignedProjectsAsync(userInfo!.CompanyId, userInfo.UserId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    #endregion
}
