@page "/company"

@inject ICompanyDTOService CompanyService
@rendermode InteractiveServer

<PageTitle>Company | Overview</PageTitle>


@if (company is not null)
{
    <h1>Company Overview</h1>
    <div class="row">
        <div class="col-xl-6">

        </div>
        <div class="col-xl-6">
            <h2>Employees</h2>
            <div class="accordion accordion-flush" id="employeeAccordion">
                @foreach (UserDTO employee in members)
                {
                <div class="accordion-item" @key="@employee.Id">
                        <EmployeeTableItem Employee="employee" />
                </div>
                }
            </div>
        </div>
    </div>



}
@code {
    #region Parameters
    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    #endregion


    #region States
    UserInfo? userInfo;

    CompanyDTO? company;

    IEnumerable<UserDTO> members = [];
    #endregion



    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        company = await CompanyService.GetCompanyByIdAsync(userInfo!.CompanyId);

        members = await CompanyService.GetCompanyMembersAsync(userInfo!.CompanyId);
        members = members.OrderBy(m => m.LastName);
    }
    #endregion
}
