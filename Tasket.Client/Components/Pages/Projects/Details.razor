@page "/projects/{projectId:int}"

@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService

@rendermode InteractiveAuto


@if (project is not null)
{
    <div class="row my-5">
        <div class="col-7">
            <section class="card bg-light-subtle rounded-5 border-1 py-1 p-md-2 p-xl-3 p-xxl-4 mb-4">
                <div class="card-body">
                    <div class="d-flex align-items-center mt-sm-n1 pb-4 mb-0 mb-lg-1 mb-xl-3">
                        <i class="ai-user text-primary lead pe-1 me-2"></i>
                        <h2 class="mb-0 h2">@project.Name</h2>
                        <a class="btn btn-sm btn-secondary ms-auto" href="/projects/edit/@project.Id">
                            <i class="ai-edit ms-n1 me-2"></i>
                            Edit info
                        </a>
                    </div>
                    <div class="d-md-flex align-items-center">
                        <div class="d-sm-flex align-items-center">
                            <div class="pt-3 pt-sm-0 ps-sm-3">
                                <h5><span class="badge text-bg-secondary">@project.Priority.GetDisplayName()</span></h5>
                                <p class="lead">Created @project.Created.ToString("g")</p>
                                <div class="text-body-secondary fw-medium d-flex flex-wrap flex-sm-nowrap align-items-center col-8">
                                    <div class="d-flex align-items-center me-3">
                                        <p>@((MarkupString)@project.Description!)</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row px-3 py-4 mb-2 mb-sm-3">
                        <div class="col-md-3 mb-4 mb-md-0">
                            <table class="table mb-0">
                                <tbody>
                                    <tr>
                                        <td class="border-0 text-body-secondary py-1 px-0">Start Date</td>
                                        <td class="border-0 text-dark fw-medium  text-end py-1 ps-3">@project.StartDate.ToString("d")</td>
                                    </tr>
                                    <tr>
                                        <td class="border-0 text-body-secondary py-1 px-0">End Date/Due</td>
                                        <td class="border-0 text-dark fw-medium text-end py-1 ps-3">@project.EndDate.ToString("d")</td>
                                    </tr>
                                    <tr>
                                        <td class="border-0 text-body-secondary py-1 px-0">Archived?</td>
                                        <td class="border-0 text-dark fw-medium text-end py-1 ps-3">@project.Archived.ToString()</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="card bg-secondary-subtle d-flex mb-0" role="alert">
                        <i class="ai-circle-info fs-xl"></i>
                        <div class="ps-2">
                            <ul>
                                @foreach (TicketDTO ticket in project.Tickets)
                                {
                                    <li>
                                        <a href="tickets/@ticket.Id">
                                            @ticket.Title
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </section>


        </div>
        <div class="col-5">
            <ProjectTeamCard ProjectId="project.Id"
                             CompanyMembers="companyEmployee"
                             ProjectMembers="projectEmployees"
                             ProjectManager="projectManager"
                             OnUpdate="AddProjectManager"
                             OnRemove="RemoveProjectManager"
                             OnMemberRemove="HandleRemoveMember"
                             OnAddMember="AddProjectMember" />
        </div>
    </div>
}
@code {

    #region Parameters
    [Parameter]
    public int ProjectId { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion



    #region State
    private UserInfo? userInfo;

    private ProjectDTO? project;

    private IEnumerable<UserDTO?> companyEmployee = [];
    private IEnumerable<UserDTO?> projectEmployees = [];

    private UserDTO? projectManager;
    #endregion



    #region Methods
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is null) return;

            project = await ProjectService.GetProjectByIdAsync(ProjectId, userInfo.CompanyId);
            companyEmployee = await CompanyService.GetCompanyMembersAsync(userInfo.CompanyId);
            projectEmployees = await ProjectService.GetProjectMembersAsync(ProjectId, userInfo.CompanyId);

            projectManager = await ProjectService.GetProjectManagerAsync(ProjectId, userInfo.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task AddProjectMember(string memberId)
    {
        if (memberId is not null)
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is null) return;
            try
            {
                await ProjectService.AddMemberToProjectAsync(ProjectId, memberId, userInfo.UserId);

                projectEmployees = await ProjectService.GetProjectMembersAsync(ProjectId, userInfo.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    private async Task HandleRemoveMember(string memberId)
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        if (userInfo is null) return;
        try
        {
            await ProjectService.RemoveMemberFromProjectAsync(ProjectId, memberId, userInfo.UserId);

            projectEmployees = await ProjectService.GetProjectMembersAsync(ProjectId, userInfo.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    private async Task AddProjectManager(string newProjectManagerId)
    {
        if (newProjectManagerId is not null)
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            if (userInfo is null) return;
            try
            {
                await ProjectService.AssignProjectManagerAsync(ProjectId, newProjectManagerId, userInfo.UserId);

                projectManager = await ProjectService.GetProjectManagerAsync(ProjectId, userInfo.CompanyId);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    private async Task RemoveProjectManager()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        if (userInfo is null) return;
        try
        {
            await ProjectService.RemoveProjectManagerAsync(ProjectId, userInfo.UserId);

            projectManager = await ProjectService.GetProjectManagerAsync(ProjectId, userInfo.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    #endregion
}
