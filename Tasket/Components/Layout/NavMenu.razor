@implements IDisposable

@inject NavigationManager NavigationManager

<div id="kt_app_header" class="app-header">
    <!--begin::Header container-->
    <div class="app-container container-fluid d-flex align-items-stretch justify-content-between"
         id="kt_app_header_container">
        <!--begin::sidebar mobile toggle-->
        <div class="d-flex align-items-center d-lg-none ms-n3 me-2" title="Show sidebar menu">
            <div class="btn btn-icon btn-active-color-primary w-35px h-35px"
                 id="kt_app_sidebar_mobile_toggle">
                <i class="ki-duotone ki-abstract-14 fs-1">
                    <span class="path1"></span>
                    <span class="path2"></span>
                </i>
            </div>
        </div>
        <!--end::sidebar mobile toggle-->
        <!--begin::Header wrapper-->
        <div class="d-flex align-items-stretch justify-content-between flex-lg-grow-1"
             id="kt_app_header_wrapper">
            <!--begin::Menu wrapper-->
            <div class="app-header-menu app-header-mobile-drawer align-items-stretch" data-kt-drawer="true"
                 data-kt-drawer-name="app-header-menu" data-kt-drawer-activate="{default: true, lg: false}"
                 data-kt-drawer-overlay="true" data-kt-drawer-width="225px" data-kt-drawer-direction="end"
                 data-kt-drawer-toggle="#kt_app_header_menu_toggle" data-kt-swapper="true"
                 data-kt-swapper-mode="{default: 'append', lg: 'prepend'}"
                 data-kt-swapper-parent="{default: '#kt_app_body', lg: '#kt_app_header_wrapper'}">
                <!--begin::Menu-->
                <div class="menu menu-rounded menu-column menu-lg-row my-5 my-lg-0 align-items-stretch fw-semibold px-2 px-lg-0"
                     id="kt_app_header_menu" data-kt-menu="true">
                </div>
                <!--end::Menu-->
            </div>
            <!--end::Menu wrapper-->
            <!--begin::Navbar-->
            <div class="app-navbar flex-shrink-0">
                <!--begin::User menu-->
                <div class="app-navbar-item ms-2 ms-1 ms-lg-3" id="kt_header_user_menu_toggle">
                    <!--begin::Menu wrapper-->
                    <div class="cursor-pointer symbol symbol-35px symbol-md-40px"
                         data-kt-menu-trigger="{default: 'click', lg: 'hover'}" data-kt-menu-attach="parent"
                         data-kt-menu-placement="bottom-end">
                        <!--begin::Avatar-->
                        <div class="symbol symbol-30px me-5">
                            <img alt="User Menu" src="@userInfo?.ProfilePictureUrl" />
                        </div>
                    </div>
                    <!--begin::User account menu-->
                    <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-800 menu-state-bg menu-state-color fw-semibold py-4 fs-6 w-275px"
                         data-kt-menu="true">
                        <!--begin::Menu item-->
                        <div class="menu-item px-3">
                            <div class="menu-content d-flex align-items-center px-3">
                                <!--begin::Username-->
                                <div class="d-flex flex-column vstack">
                                    <div class="fw-bold align-items-center fs-5 text-wrap">
                                        @if (userInfo is not null)
                                        {
                                            if (userInfo.Roles.Any() == false) return;
                                            @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                                            {
                                                if (userInfo.Roles.Any(r => r == role.ToString()))
                                                {
                                                    if (role == Roles.DemoUser)
                                                    {
                                                        <p class="badge badge-light-success fw-bold fs-8 py-2 px-2 mb-0 mx-5">
                                                            @role.GetDisplayName()
                                                        </p>
                                                    }
                                                    else
                                                    {
                                                        <p class="badge badge-light-primary fw-bold fs-8 py-2 px-2 mb-0">
                                                            @role.GetDisplayName()
                                                        </p>                                                        
                                                    }
                                                }
                                                if (userInfo.Roles.Any(r => r == role.ToString()))
                                                {
                                                }
                                            }
                                        }
                                        <p class="">@userInfo?.FullName</p>
                                    </div>
                                    <p class="fw-semibold text-muted fs-7">
                                        @userInfo?.Email
                                    </p>
                                </div>
                                <!--end::Username-->
                            </div>
                        </div>
                        <!--end::Menu item-->
                        <!--begin::Menu separator-->
                        <div class="separator my-2"></div>
                        <!--end::Menu separator-->
                        <!--begin::Menu item-->
                        <div class="menu-item px-5">
                            <a href="/Account/Manage" class="menu-link px-5">My Profile</a>
                        </div>
                        <!--end::Menu item-->
                        <AuthorizeView>
                            <Authorized>
                                <!--begin:Menu item-->
                                <div class="menu-item">
                                    <!--begin:Menu link-->
                                    <form class="menu-link px-5" action="Account/Logout" method="post">
                                        <AntiforgeryToken />
                                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                        <button class="menu-link nav-link px-5" href="Account/Manage">
                                            Logout
                                        </button>
                                    </form>
                                    <!--end:Menu link-->
                                </div>
                                <!--end:Menu item-->
                            </Authorized>
                            <NotAuthorized>
                                <!--begin::Menu item-->
                                <div class="menu-item px-5 my-1">
                                    <a href="Account/Login" class="menu-link px-5">Login</a>
                                </div>
                                <!--end::Menu item-->
                            </NotAuthorized>
                        </AuthorizeView>


                    </div>
                    <!--end::User account menu-->
                    <!--end::Menu wrapper-->
                </div>
                <!--end::User menu-->
            </div>
            <!--end::Navbar-->
        </div>
        <!--end::Header wrapper-->
    </div>
    <!--end::Header container-->
</div>


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private string? currentUrl;
    private UserInfo? userInfo;


    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}
