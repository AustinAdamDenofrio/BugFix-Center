@page "/dashboard"
@using Microsoft.AspNetCore.Authorization

@inject ITicketDTOService TicketService

@attribute [Authorize]
@if (tickets is not null)
{
    <div class="row my-5">
        <div class="col-8">
            <div class="row g-5 ">
                <div class="col-3">
                    <div class="card bg-teal">
                        <div class="card-body text-center">
                            <h1 class="text-gray-100"> number</h1>
                            <p class="text-gray-100">Active Projects</p>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    <div class="card bg-gray-700">
                        <div class="card-body text-center">
                            <h1 class="text-gray-100"> number</h1>
                            <p class="text-gray-100">Total Tickets</p>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    <div class="card bg-orange">
                        <div class="card-body text-center">
                            <h1 class="text-gray-100"> number</h1>
                            <p class="text-gray-200">Resolved Tickets</p>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    <div class="card bg-black">
                        <div class="card-body text-center">
                            <h1 class="text-gray-300"> number</h1>
                            <p class="text-gray-200">Unassigned Tickets</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-4">
            @if (tickets?.Any() == true)
            {
                <div class="col-12">
            <div class="card bg-gray-400">
                <div class="card-body text-center">
                    <h1 class="text-gray-100"><a href="/tickets/@tickets[recentTicketIndex].Id">@tickets[recentTicketIndex].Title</a></h1>
                    <p class="text-gray-100">Recent Tickets</p>
                </div>
                <div>
                    <button @onclick="IncrementRecentTicketIndex">
                        <i class="ki-duotone ki-arrow-left">
                            <span class="path1"></span>
                            <span class="path2"></span>
                        </i>
                    </button>
                    <button @onclick="DecrementRecentTicketIndex">
                        <i class="ki-duotone ki-arrow-right">
                            <span class="path1"></span>
                            <span class="path2"></span>
                        </i>
                    </button>
                </div>
            </div>
        </div>                
            }
    </div>
</div>
}

@code {
    #region Parameters
    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }
    #endregion

    #region States
    private List<TicketDTO> tickets = [];
    private int recentTicketIndex = 1;


    private UserInfo? userInfo;
    #endregion


    #region Methods
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        if (userInfo is null) return;
        tickets = [.. await TicketService.GetUsersRecentlyEditedTicketsAsync(userInfo.CompanyId, userInfo.UserId)];
    }

    private void IncrementRecentTicketIndex()
    {
        if (tickets is null || !tickets.Any()) return;
        if (recentTicketIndex < 0 || recentTicketIndex >= tickets.Count)
        {
            recentTicketIndex = 0;
            return;
        }

        if (recentTicketIndex == tickets.Count-1)
        {
            recentTicketIndex = 0;
            return;
        }

        recentTicketIndex++;
    }

    private void DecrementRecentTicketIndex()
    {
        if (tickets is null || !tickets.Any()) return;
        if (recentTicketIndex < 0 || recentTicketIndex >= tickets.Count)
        {
            recentTicketIndex = 0;
            return;
        }


        if (recentTicketIndex == 0)
        {
            recentTicketIndex = tickets.Count - 1;
        }

        recentTicketIndex--;
    }
    #endregion




}
