@page "/Account/Login"
@layout LandingPageLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Tasket.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>
<div class="container-xxl flex-grow-1 py-2 my-5">
    <div class="hstack">
        <h1 class="me-auto">Log in</h1> 
        <div class="d-md-none">            
            <EditForm id="demo-account" Model="Input" method="post" OnSubmit="LoginDemoUser" FormName="demo2"> 
                <div class="vstack text-center gap-2 px-3">
                    <button class="btn btn-info" type="submit" name="Input.DemoRole" value="@Roles.Admin"> 
                        Demo App 
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <h2>Use a company account to log in.</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                            Remember me
                        </label>
                    </div>
                    <div class="vstack gap-2">
                        <button type="submit" class="btn btn-lg btn-primary">Log in</button>
                        <EditForm id="demo-account" Model="Input" method="post" OnSubmit="LoginDemoUser" FormName="demo"> 
                            <button class="btn btn-light-success" type="submit" name="Input.DemoRole" value="@Roles.Admin"> 
                                Log in as Demo User
                            </button>
                        </EditForm>
                    </div>
                    <div>
                        <p class="mt-1">
                            <a href="Account/ForgotPassword">Forgot your password?</a>
                        </p>
                        <p>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                        </p>
                        <p>
                            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                        </p>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>

﻿

</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }




    ﻿

    public async Task LoginDemoUser()
    {
        if (Input.DemoRole is not null)
        {
            string email = Input.DemoRole switch
            {            
                Roles.Admin => "demoadmin@bugtracker.com",
                Roles.ProjectManager => "demopm@bugtracker.com", 
                Roles.Developer => "demodev@bugtracker.com", 
                Roles.Submitter => "demosub@bugtracker.com",
                _ => ""
            };

            ApplicationUser? user = await UserManager.FindByEmailAsync(email); 
            if (user is not null)
            {
                await SignInManager.SignInAsync(user, false); 
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        errorMessage = "Error: Invalid login attempt.";
    }



    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = null!;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = null!;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = false;

        public Roles? DemoRole { get; set; }
    }
}
